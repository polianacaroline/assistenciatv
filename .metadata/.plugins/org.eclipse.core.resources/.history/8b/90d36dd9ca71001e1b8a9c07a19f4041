package view;

import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.util.Date;

import javax.swing.JButton;
import javax.swing.JDialog;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import model.DAO;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JPanel;
import java.awt.SystemColor;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import java.awt.Component;
import java.awt.Font;

@SuppressWarnings("unused")
public class Relatorios extends JDialog {
	private PreparedStatement pst;
	private ResultSet rs;
	private Connection con;
	DAO dao = new DAO();

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Relatorios dialog = new Relatorios();
					dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
					dialog.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the dialog.
	 */
	public Relatorios() {
		getContentPane().setBackground(Color.WHITE);
		setModal(true);
		setTitle("Relatorio");
		setResizable(false);
		setBounds(100, 100, 450, 500);
		getContentPane().setLayout(null);
		setLocationRelativeTo(null);

		JButton btnClientes = new JButton("");
		btnClientes.setToolTipText("Clientes");
		btnClientes.setIcon(new ImageIcon(Relatorios.class.getResource("/img/372902_user_name_round_username_linecon_icon.png")));
		btnClientes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				relatorioClientes();
			}
		});
		btnClientes.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		btnClientes.setBounds(239, 259, 68, 68);
		getContentPane().add(btnClientes);

		JButton btnServicos = new JButton("");
		btnServicos.setToolTipText("Serviços");
		btnServicos.setIcon(new ImageIcon(Relatorios.class.getResource("/img/serv.png")));
		btnServicos.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				relatorioServicos();
			}
		});
		btnServicos.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		btnServicos.setBounds(238, 145, 68, 68);
		getContentPane().add(btnServicos);

		JPanel panel = new JPanel();
		panel.setBackground(SystemColor.textHighlight);
		panel.setBounds(0, 0, 131, 461);
		getContentPane().add(panel);
		panel.setLayout(null);

		JLabel lblNewLabel = new JLabel("Clientes:");
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblNewLabel.setAlignmentY(Component.TOP_ALIGNMENT);
		lblNewLabel.setBounds(247, 239, 52, 14);
		getContentPane().add(lblNewLabel);

		JLabel lblServios = new JLabel("Serviços");
		lblServios.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblServios.setAlignmentY(0.0f);
		lblServios.setBounds(249, 130, 54, 14);
		getContentPane().add(lblServios);

		JButton btnServicos_1 = new JButton("");
		btnServicos_1.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		btnServicos_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				relatorioEstoque();
			}
		});
		btnServicos_1.setIcon(new ImageIcon(Relatorios.class.getResource("/img/boxxq.png")));
		btnServicos_1.setToolTipText("Serviços");
		btnServicos_1.setBounds(238, 31, 68, 68);
		getContentPane().add(btnServicos_1);

		JLabel lblEstoq = new JLabel("Estoque");
		lblEstoq.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblEstoq.setAlignmentY(0.0f);
		lblEstoq.setBounds(246, 15, 59, 14);
		getContentPane().add(lblEstoq);
		
		JButton btnClientes_1 = new JButton("");
		btnClientes_1.setToolTipText("Clientes");
		btnClientes_1.setBounds(238, 366, 68, 68);
		getContentPane().add(btnClientes_1);
		
		JLabel lblNewLabel_1 = new JLabel("Clientes:");
		lblNewLabel_1.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblNewLabel_1.setAlignmentY(0.0f);
		lblNewLabel_1.setBounds(246, 346, 52, 14);
		getContentPane().add(lblNewLabel_1);

	}

	/**
	 * Metodo responsavel por: imprimir o relatorio de clientes.
	 */
	private void relatorioClientes() {

		Document document = new Document();

		try {

			PdfWriter.getInstance(document, new FileOutputStream("clientes.pdf"));

			document.open();

			Date dataRelatorio = new Date();
			DateFormat formatador = DateFormat.getDateInstance(DateFormat.FULL);
			document.add(new Paragraph(formatador.format(dataRelatorio)));

			document.add(new Paragraph("Clientes:"));
			document.add(new Paragraph(" "));

			String readClientes = "select nome, fone, email from clientes order by nome";
			try {

				con = dao.conectar();

				pst = con.prepareStatement(readClientes);

				rs = pst.executeQuery();

				PdfPTable tabela = new PdfPTable(3);

				PdfPCell col1 = new PdfPCell(new Paragraph("Cliente: "));
				PdfPCell col2 = new PdfPCell(new Paragraph("Fone: "));
				PdfPCell col3 = new PdfPCell(new Paragraph("Email: "));
				tabela.addCell(col1);
				tabela.addCell(col2);
				tabela.addCell(col3);
				while (rs.next()) {

					tabela.addCell(rs.getString(1));
					tabela.addCell(rs.getString(2));
					tabela.addCell(rs.getString(3));
				}

				document.add(tabela);

				con.close();
			} catch (Exception e) {
				System.out.println(e);
			}
		} catch (Exception e) {
			System.out.println(e);
		}

		document.close();

		try {
			Desktop.getDesktop().open(new File("clientes.pdf"));
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	/**
	 * Metodo responsavel por: imprimir o relatorio de servicos.
	 */
	private void relatorioServicos() {

		Document document = new Document();

		document.setPageSize(PageSize.A4.rotate());

		try {

			PdfWriter.getInstance(document, new FileOutputStream("servicos.pdf"));

			document.open();

			Date dataRelatorio = new Date();
			DateFormat formatador = DateFormat.getDateInstance(DateFormat.FULL);
			document.add(new Paragraph(formatador.format(dataRelatorio)));

			document.add(new Paragraph("SERVIÇOS:"));
			document.add(new Paragraph(" "));

			String readServicos = "select os, nome, dataOS, equipamento, defeito, valor from servicos inner join clientes on servicos.idcli = clientes.idcli order by os";
			try {

				con = dao.conectar();

				pst = con.prepareStatement(readServicos);

				rs = pst.executeQuery();

				PdfPTable tabela = new PdfPTable(6);

				PdfPCell col1 = new PdfPCell(new Paragraph("OS: "));
				PdfPCell col2 = new PdfPCell(new Paragraph("Cliente: "));
				PdfPCell col3 = new PdfPCell(new Paragraph("Data da OS: "));
				PdfPCell col4 = new PdfPCell(new Paragraph("Equipamento: "));
				PdfPCell col5 = new PdfPCell(new Paragraph("Defeito: "));
				PdfPCell col6 = new PdfPCell(new Paragraph("Valor: "));

				tabela.addCell(col1);
				tabela.addCell(col2);
				tabela.addCell(col3);
				tabela.addCell(col4);
				tabela.addCell(col5);
				tabela.addCell(col6);
				;
				while (rs.next()) {

					tabela.addCell(rs.getString(1));
					tabela.addCell(rs.getString(2));
					tabela.addCell(rs.getString(3));
					tabela.addCell(rs.getString(4));
					tabela.addCell(rs.getString(5));
					tabela.addCell(rs.getString(6));

				}

				document.add(tabela);

				con.close();
			} catch (Exception e) {
				System.out.println(e);
			}
		} catch (Exception e) {
			System.out.println(e);
		}

		document.close();

		try {
			Desktop.getDesktop().open(new File("servicos.pdf"));
		} catch (Exception e) {
			System.out.println(e);
		}
	}

	/**
	 * Metodo responsavel por: imprimir o relatorio de estoque.
	 */
	private void relatorioEstoque() {

		Document document = new Document();

		try {

			PdfWriter.getInstance(document, new FileOutputStream("estoque.pdf"));

			document.open();

			Date dataRelatorio = new Date();
			DateFormat formatador = DateFormat.getDateInstance(DateFormat.FULL);
			document.add(new Paragraph(formatador.format(dataRelatorio)));

			document.add(new Paragraph("Estoque:"));
			document.add(new Paragraph(" "));
			String readClientes = "select codigo as código, nome as produto, date_format(dataval, '%d/%m/%Y') as validade, estoque, estoquemin as estóque_mínimo \r\n"
					+ "from produtos where estoque < estoquemin";
			try {

				con = dao.conectar();

				pst = con.prepareStatement(readClientes);

				rs = pst.executeQuery();

				PdfPTable tabela = new PdfPTable(5);

				PdfPCell col1 = new PdfPCell(new Paragraph("código: "));
				PdfPCell col2 = new PdfPCell(new Paragraph("produto: "));
				PdfPCell col3 = new PdfPCell(new Paragraph("validade: "));
				PdfPCell col4 = new PdfPCell(new Paragraph("estoque: "));
				PdfPCell col5 = new PdfPCell(new Paragraph("estoque mínimo: "));

				tabela.addCell(col1);
				tabela.addCell(col2);
				tabela.addCell(col3);
				tabela.addCell(col4);
				tabela.addCell(col5);
				while (rs.next()) {

					tabela.addCell(rs.getString(1));
					tabela.addCell(rs.getString(2));
					tabela.addCell(rs.getString(3));
					tabela.addCell(rs.getString(4));
					tabela.addCell(rs.getString(5));
				}

				document.add(tabela);

				document.add(new Paragraph("Validade:"));
				document.add(new Paragraph(" "));

				String read = "select codigo as código, nome as produto, date_format(dataval, '%d/%m/%Y') as validade\r\n"
						+ "from produtos where dataval < dataent";

				pst = con.prepareStatement(read);
				rs = pst.executeQuery();

				PdfPTable tabela2 = new PdfPTable(3);
				PdfPCell col6 = new PdfPCell(new Paragraph("código: "));
				PdfPCell col7 = new PdfPCell(new Paragraph("produto: "));
				PdfPCell col8 = new PdfPCell(new Paragraph("validade: "));
				tabela2.addCell(col6);
				tabela2.addCell(col7);
				tabela2.addCell(col8);

				while (rs.next()) {
					tabela2.addCell(rs.getString(1));
					tabela2.addCell(rs.getString(2));
					tabela2.addCell(rs.getString(3));
				}
				document.add(tabela2);

				document.add(new Paragraph(" "));

				document.add(new Paragraph("Patrimônio (Custo):"));

				document.add(new Paragraph(" "));

				String read2 = "select sum(valor * estoque) as Total from produtos";

				pst = con.prepareStatement(read);
				rs = pst.executeQuery();

				PdfPTable tabela3 = new PdfPTable(1);
				PdfPCell col12 = new PdfPCell(new Paragraph("Patrimônio custo: "));
				tabela3.addCell(col12);

				while (rs.next()) {
					tabela3.addCell(rs.getString(1));
				}

				document.add(tabela3);

				document.add(new Paragraph(" "));

				document.add(new Paragraph("Patrimônio (venda):"));

				document.add(new Paragraph(" "));

				String readVenda = "select sum((custo + (custo * lucro)/100) * estoque) as total from produtos";

				pst = con.prepareStatement(read);
				rs = pst.executeQuery();

				PdfPTable tabela4 = new PdfPTable(1);
				PdfPCell col43 = new PdfPCell(new Paragraph("Patrimônio venda: "));
				tabela4.addCell(col43);

				while (rs.next()) {
					tabela4.addCell(rs.getString(1));
				}

				document.add(tabela4);

				con.close();
			} catch (Exception e) {
				System.out.println(e);
			}
		} catch (Exception e) {
			System.out.println(e);
		}

		document.close();

		try {
			Desktop.getDesktop().open(new File("estoque.pdf"));
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}
